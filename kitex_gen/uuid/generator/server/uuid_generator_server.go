// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package server

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Base struct {
	Code    *int64  `thrift:"code,1,optional" frugal:"1,optional,i64" json:"code,omitempty"`
	Message *string `thrift:"message,2,optional" frugal:"2,optional,string" json:"message,omitempty"`
}

func NewBase() *Base {
	return &Base{}
}

func (p *Base) InitDefault() {
	*p = Base{}
}

var Base_Code_DEFAULT int64

func (p *Base) GetCode() (v int64) {
	if !p.IsSetCode() {
		return Base_Code_DEFAULT
	}
	return *p.Code
}

var Base_Message_DEFAULT string

func (p *Base) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return Base_Message_DEFAULT
	}
	return *p.Message
}
func (p *Base) SetCode(val *int64) {
	p.Code = val
}
func (p *Base) SetMessage(val *string) {
	p.Message = val
}

var fieldIDToName_Base = map[int16]string{
	1: "code",
	2: "message",
}

func (p *Base) IsSetCode() bool {
	return p.Code != nil
}

func (p *Base) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Base) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Base[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Base) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Code = &v
	}
	return nil
}
func (p *Base) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = &v
	}
	return nil
}

func (p *Base) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Base"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Base) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Base) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Base) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Base(%+v)", *p)
}

func (p *Base) DeepEqual(ano *Base) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Base) Field1DeepEqual(src *int64) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *Base) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}

type GetUUIDBoundsRequest struct {
	BizCode *int64 `thrift:"biz_code,1,optional" frugal:"1,optional,i64" json:"biz_code,omitempty"`
	Count   *int64 `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
}

func NewGetUUIDBoundsRequest() *GetUUIDBoundsRequest {
	return &GetUUIDBoundsRequest{}
}

func (p *GetUUIDBoundsRequest) InitDefault() {
	*p = GetUUIDBoundsRequest{}
}

var GetUUIDBoundsRequest_BizCode_DEFAULT int64

func (p *GetUUIDBoundsRequest) GetBizCode() (v int64) {
	if !p.IsSetBizCode() {
		return GetUUIDBoundsRequest_BizCode_DEFAULT
	}
	return *p.BizCode
}

var GetUUIDBoundsRequest_Count_DEFAULT int64

func (p *GetUUIDBoundsRequest) GetCount() (v int64) {
	if !p.IsSetCount() {
		return GetUUIDBoundsRequest_Count_DEFAULT
	}
	return *p.Count
}
func (p *GetUUIDBoundsRequest) SetBizCode(val *int64) {
	p.BizCode = val
}
func (p *GetUUIDBoundsRequest) SetCount(val *int64) {
	p.Count = val
}

var fieldIDToName_GetUUIDBoundsRequest = map[int16]string{
	1: "biz_code",
	2: "count",
}

func (p *GetUUIDBoundsRequest) IsSetBizCode() bool {
	return p.BizCode != nil
}

func (p *GetUUIDBoundsRequest) IsSetCount() bool {
	return p.Count != nil
}

func (p *GetUUIDBoundsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUUIDBoundsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUUIDBoundsRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BizCode = &v
	}
	return nil
}
func (p *GetUUIDBoundsRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = &v
	}
	return nil
}

func (p *GetUUIDBoundsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUUIDBoundsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUUIDBoundsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizCode() {
		if err = oprot.WriteFieldBegin("biz_code", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BizCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetUUIDBoundsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUUIDBoundsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUUIDBoundsRequest(%+v)", *p)
}

func (p *GetUUIDBoundsRequest) DeepEqual(ano *GetUUIDBoundsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BizCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *GetUUIDBoundsRequest) Field1DeepEqual(src *int64) bool {

	if p.BizCode == src {
		return true
	} else if p.BizCode == nil || src == nil {
		return false
	}
	if *p.BizCode != *src {
		return false
	}
	return true
}
func (p *GetUUIDBoundsRequest) Field2DeepEqual(src *int64) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}

type UUIDBound struct {
	Start *int64 `thrift:"start,1,optional" frugal:"1,optional,i64" json:"start,omitempty"`
	End   *int64 `thrift:"end,2,optional" frugal:"2,optional,i64" json:"end,omitempty"`
}

func NewUUIDBound() *UUIDBound {
	return &UUIDBound{}
}

func (p *UUIDBound) InitDefault() {
	*p = UUIDBound{}
}

var UUIDBound_Start_DEFAULT int64

func (p *UUIDBound) GetStart() (v int64) {
	if !p.IsSetStart() {
		return UUIDBound_Start_DEFAULT
	}
	return *p.Start
}

var UUIDBound_End_DEFAULT int64

func (p *UUIDBound) GetEnd() (v int64) {
	if !p.IsSetEnd() {
		return UUIDBound_End_DEFAULT
	}
	return *p.End
}
func (p *UUIDBound) SetStart(val *int64) {
	p.Start = val
}
func (p *UUIDBound) SetEnd(val *int64) {
	p.End = val
}

var fieldIDToName_UUIDBound = map[int16]string{
	1: "start",
	2: "end",
}

func (p *UUIDBound) IsSetStart() bool {
	return p.Start != nil
}

func (p *UUIDBound) IsSetEnd() bool {
	return p.End != nil
}

func (p *UUIDBound) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UUIDBound[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UUIDBound) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Start = &v
	}
	return nil
}
func (p *UUIDBound) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.End = &v
	}
	return nil
}

func (p *UUIDBound) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UUIDBound"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UUIDBound) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("start", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UUIDBound) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnd() {
		if err = oprot.WriteFieldBegin("end", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.End); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UUIDBound) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UUIDBound(%+v)", *p)
}

func (p *UUIDBound) DeepEqual(ano *UUIDBound) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Start) {
		return false
	}
	if !p.Field2DeepEqual(ano.End) {
		return false
	}
	return true
}

func (p *UUIDBound) Field1DeepEqual(src *int64) bool {

	if p.Start == src {
		return true
	} else if p.Start == nil || src == nil {
		return false
	}
	if *p.Start != *src {
		return false
	}
	return true
}
func (p *UUIDBound) Field2DeepEqual(src *int64) bool {

	if p.End == src {
		return true
	} else if p.End == nil || src == nil {
		return false
	}
	if *p.End != *src {
		return false
	}
	return true
}

type GetUUIDBoundsResponse struct {
	UuidBounds []*UUIDBound `thrift:"uuid_bounds,1,optional" frugal:"1,optional,list<UUIDBound>" json:"uuid_bounds,omitempty"`
	Base       *Base        `thrift:"base,255,optional" frugal:"255,optional,Base" json:"base,omitempty"`
}

func NewGetUUIDBoundsResponse() *GetUUIDBoundsResponse {
	return &GetUUIDBoundsResponse{}
}

func (p *GetUUIDBoundsResponse) InitDefault() {
	*p = GetUUIDBoundsResponse{}
}

var GetUUIDBoundsResponse_UuidBounds_DEFAULT []*UUIDBound

func (p *GetUUIDBoundsResponse) GetUuidBounds() (v []*UUIDBound) {
	if !p.IsSetUuidBounds() {
		return GetUUIDBoundsResponse_UuidBounds_DEFAULT
	}
	return p.UuidBounds
}

var GetUUIDBoundsResponse_Base_DEFAULT *Base

func (p *GetUUIDBoundsResponse) GetBase() (v *Base) {
	if !p.IsSetBase() {
		return GetUUIDBoundsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetUUIDBoundsResponse) SetUuidBounds(val []*UUIDBound) {
	p.UuidBounds = val
}
func (p *GetUUIDBoundsResponse) SetBase(val *Base) {
	p.Base = val
}

var fieldIDToName_GetUUIDBoundsResponse = map[int16]string{
	1:   "uuid_bounds",
	255: "base",
}

func (p *GetUUIDBoundsResponse) IsSetUuidBounds() bool {
	return p.UuidBounds != nil
}

func (p *GetUUIDBoundsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUUIDBoundsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUUIDBoundsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUUIDBoundsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.UuidBounds = make([]*UUIDBound, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewUUIDBound()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.UuidBounds = append(p.UuidBounds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *GetUUIDBoundsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = NewBase()

	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetUUIDBoundsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUUIDBoundsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUUIDBoundsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUuidBounds() {
		if err = oprot.WriteFieldBegin("uuid_bounds", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UuidBounds)); err != nil {
			return err
		}
		for _, v := range p.UuidBounds {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetUUIDBoundsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetUUIDBoundsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUUIDBoundsResponse(%+v)", *p)
}

func (p *GetUUIDBoundsResponse) DeepEqual(ano *GetUUIDBoundsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UuidBounds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetUUIDBoundsResponse) Field1DeepEqual(src []*UUIDBound) bool {

	if len(p.UuidBounds) != len(src) {
		return false
	}
	for i, v := range p.UuidBounds {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetUUIDBoundsResponse) Field255DeepEqual(src *Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UUIDGeneratorServer interface {
	GetUUIDBounds(ctx context.Context, req *GetUUIDBoundsRequest) (r *GetUUIDBoundsResponse, err error)
}

type UUIDGeneratorServerClient struct {
	c thrift.TClient
}

func NewUUIDGeneratorServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UUIDGeneratorServerClient {
	return &UUIDGeneratorServerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewUUIDGeneratorServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UUIDGeneratorServerClient {
	return &UUIDGeneratorServerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewUUIDGeneratorServerClient(c thrift.TClient) *UUIDGeneratorServerClient {
	return &UUIDGeneratorServerClient{
		c: c,
	}
}

func (p *UUIDGeneratorServerClient) Client_() thrift.TClient {
	return p.c
}

func (p *UUIDGeneratorServerClient) GetUUIDBounds(ctx context.Context, req *GetUUIDBoundsRequest) (r *GetUUIDBoundsResponse, err error) {
	var _args UUIDGeneratorServerGetUUIDBoundsArgs
	_args.Req = req
	var _result UUIDGeneratorServerGetUUIDBoundsResult
	if err = p.Client_().Call(ctx, "GetUUIDBounds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type UUIDGeneratorServerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UUIDGeneratorServer
}

func (p *UUIDGeneratorServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UUIDGeneratorServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UUIDGeneratorServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUUIDGeneratorServerProcessor(handler UUIDGeneratorServer) *UUIDGeneratorServerProcessor {
	self := &UUIDGeneratorServerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetUUIDBounds", &uUIDGeneratorServerProcessorGetUUIDBounds{handler: handler})
	return self
}
func (p *UUIDGeneratorServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type uUIDGeneratorServerProcessorGetUUIDBounds struct {
	handler UUIDGeneratorServer
}

func (p *uUIDGeneratorServerProcessorGetUUIDBounds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UUIDGeneratorServerGetUUIDBoundsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUUIDBounds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UUIDGeneratorServerGetUUIDBoundsResult{}
	var retval *GetUUIDBoundsResponse
	if retval, err2 = p.handler.GetUUIDBounds(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUUIDBounds: "+err2.Error())
		oprot.WriteMessageBegin("GetUUIDBounds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUUIDBounds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type UUIDGeneratorServerGetUUIDBoundsArgs struct {
	Req *GetUUIDBoundsRequest `thrift:"req,1" frugal:"1,default,GetUUIDBoundsRequest" json:"req"`
}

func NewUUIDGeneratorServerGetUUIDBoundsArgs() *UUIDGeneratorServerGetUUIDBoundsArgs {
	return &UUIDGeneratorServerGetUUIDBoundsArgs{}
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) InitDefault() {
	*p = UUIDGeneratorServerGetUUIDBoundsArgs{}
}

var UUIDGeneratorServerGetUUIDBoundsArgs_Req_DEFAULT *GetUUIDBoundsRequest

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) GetReq() (v *GetUUIDBoundsRequest) {
	if !p.IsSetReq() {
		return UUIDGeneratorServerGetUUIDBoundsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UUIDGeneratorServerGetUUIDBoundsArgs) SetReq(val *GetUUIDBoundsRequest) {
	p.Req = val
}

var fieldIDToName_UUIDGeneratorServerGetUUIDBoundsArgs = map[int16]string{
	1: "req",
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UUIDGeneratorServerGetUUIDBoundsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetUUIDBoundsRequest()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUUIDBounds_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UUIDGeneratorServerGetUUIDBoundsArgs(%+v)", *p)
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) DeepEqual(ano *UUIDGeneratorServerGetUUIDBoundsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UUIDGeneratorServerGetUUIDBoundsArgs) Field1DeepEqual(src *GetUUIDBoundsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type UUIDGeneratorServerGetUUIDBoundsResult struct {
	Success *GetUUIDBoundsResponse `thrift:"success,0,optional" frugal:"0,optional,GetUUIDBoundsResponse" json:"success,omitempty"`
}

func NewUUIDGeneratorServerGetUUIDBoundsResult() *UUIDGeneratorServerGetUUIDBoundsResult {
	return &UUIDGeneratorServerGetUUIDBoundsResult{}
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) InitDefault() {
	*p = UUIDGeneratorServerGetUUIDBoundsResult{}
}

var UUIDGeneratorServerGetUUIDBoundsResult_Success_DEFAULT *GetUUIDBoundsResponse

func (p *UUIDGeneratorServerGetUUIDBoundsResult) GetSuccess() (v *GetUUIDBoundsResponse) {
	if !p.IsSetSuccess() {
		return UUIDGeneratorServerGetUUIDBoundsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UUIDGeneratorServerGetUUIDBoundsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUUIDBoundsResponse)
}

var fieldIDToName_UUIDGeneratorServerGetUUIDBoundsResult = map[int16]string{
	0: "success",
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UUIDGeneratorServerGetUUIDBoundsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetUUIDBoundsResponse()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUUIDBounds_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UUIDGeneratorServerGetUUIDBoundsResult(%+v)", *p)
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) DeepEqual(ano *UUIDGeneratorServerGetUUIDBoundsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UUIDGeneratorServerGetUUIDBoundsResult) Field0DeepEqual(src *GetUUIDBoundsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
